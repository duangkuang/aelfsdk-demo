syntax = "proto3";

import "aelf/options.proto";
import "aelf/core.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
// The namespace of this class
option csharp_namespace = "AElf.Contracts.BaccartContract";

service BaccartContract {
  // The name of the state class the smart contract is going to use to access blockchain state
  option (aelf.csharp_state) = "AElf.Contracts.BaccartContract.BaccartContractState";
  
  rpc Constructor (aelf.Address) returns (google.protobuf.Empty);
  rpc DepositToContract (google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc PlaceBet (Bet) returns (google.protobuf.Empty);
  rpc BetAndPlay (google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc WithdrawBalance (google.protobuf.Empty) returns (google.protobuf.Empty);

  // Actions (methods that modify contract state)
  // Stores the value in contract state
  rpc Update (google.protobuf.StringValue) returns (google.protobuf.Empty) {
  }

  // Views (methods that don't modify contract state)
  // Get the value stored from contract state
  rpc Read (google.protobuf.Empty) returns (google.protobuf.StringValue) {
    option (aelf.is_view) = true;
  }
}

// An event that will be emitted from contract method call
message UpdatedMessage {
  option (aelf.is_event) = true;
  string value = 1;
}

message Bet {
  int64 BankerAmount = 1;
  int64 PlayerAmount = 2;
  int64 TieAmount = 3;
  int64 BankerPairAmount = 4;
  int64 PlayerPairAmount = 5;
}

message GameResult {
  int32 BankerCard1 = 1;
  int32 BankerCard2 = 2;
  int32 PlayerCard1 = 3;
  int32 PlayerCard2 = 4;
  int32 BankerCard3 = 5;
  int32 PlayerCard3 = 6;
  string Outcome = 7;
  int64 Payout = 8;
}

message GameOutcome {
  option (aelf.is_event) = true;
  aelf.Address Player = 1;
  GameResult Result = 2;
}

message TransferInput {
  // The receiver of the token.
  aelf.Address to = 1;
  // The token symbol to transfer.
  string symbol = 2;
  // The amount to to transfer.
  int64 amount = 3;
  // The memo.
  string memo = 4;
}

message TransferFromInput {
  aelf.Address from = 1;
  // The receiver of the token.
  aelf.Address to = 2;
  // The token symbol to transfer.
  string symbol = 3;
  // The amount to to transfer.
  int64 amount = 4;
  // The memo.
  string memo = 5;
}